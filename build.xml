<?xml version="1.0" encoding="UTF-8"?>

<project name="Jenkins Ant Pattern" default="build">
    <property name="workspace" value="${basedir}" />
    <property name="sourcedir" value="${basedir}" />
    <property name="builddir" value="${workspace}/build" />

    <target name="build"
        depends="prepare,lint,phploc,pdepend,phpcpd,phpmd-ci,phpcs-ci,doxygen,
        phpunit,phpcb"/>

    <target name="build-parallel" depends="prepare,lint,tools-parallel,phpunit,
        phpcb"/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc"/>
            <antcall target="doxygen"/>
        </parallel>
    </target>

    <target name="clean" description="Cleanup build artifacts">
        <delete dir="${builddir}/api"/>
        <delete dir="${builddir}/code-browser"/>
        <delete dir="${builddir}/coverage"/>
        <delete dir="${builddir}/logs"/>
        <delete dir="${builddir}/pdepend"/>
        <delete dir="${builddir}/docs/*"/>
    </target>

    <target name="prepare" depends="clean" description="Prepare for build">
        <mkdir dir="${builddir}/api"/>
        <mkdir dir="${builddir}/code-browser"/>
        <mkdir dir="${builddir}/coverage"/>
        <mkdir dir="${builddir}/logs"/>
        <mkdir dir="${builddir}/pdepend"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
        <arg value="-l" />
        <fileset dir="${sourcedir}">
            <include name="**/*.php" />
            <modified />
        </fileset>
        <fileset dir="${basedir}">
            <include name="**/*Test.php" />
            <modified />
        </fileset>
        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="phploc">
        <arg value="--log-csv" />
        <arg value="${builddir}/logs/phploc.csv" />
        <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using
        PHP_Depend">
        <exec executable="pdepend">
            <arg value="--jdepend-xml=${builddir}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${builddir}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${builddir}/pdepend/overview-pyramid.svg" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpmd" description="Perform project mess detection using
        PHPMD and print human readable output. Intended for usage on the
        command line before committing.">
        <exec executable="phpmd">
                <arg path="${sourcedir}" />
            <arg value="text" />
            <arg value="${workspace}/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci" description="Perform project mess detection using
        PHPMD creating a log file for the continuous integration server">
        <exec executable="phpmd">
            <arg path="${sourcedir}" />
            <arg value="xml" />
            <arg value="${workspace}/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${builddir}/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs" description="Find coding standard violations using
        PHP_CodeSniffer and print human readable output. Intended for usage on
        the command line before committing.">
        <exec executable="phpcs">
            <arg value="--standard=Pear" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpcs-ci" description="Find coding standard violations using
        PHP_CodeSniffer creating a log file for the continuous integration
        server">
        <exec executable="phpcs" output="/dev/null">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${builddir}/logs/checkstyle.xml" />
            <arg value="--standard=Pear" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="phpcpd">
            <arg value="--log-pmd" />
            <arg value="${builddir}/logs/pmd-cpd.xml" />
            <arg path="${sourcedir}" />
        </exec>
    </target>

    <target name="doxygen" description="Generate API documentation using
        doxygen">
        <exec executable="doxygen" failonerror="true">
            <arg value="Doxyfile" />
        </exec>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="phpunit" failonerror="true">
            <arg value="--coverage-crap4j"/>
            <arg value="${builddir}/logs/crap4j.xml"/>
            <arg value="--coverage-clover" />
            <arg value="${builddir}/logs/clover.xml" />
            <arg value="--coverage-html" />
            <arg value="${builddir}/coverage" />
            <arg value="-c" />
            <arg path="${basedir}/phpunit.xml" />
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with
        PHP_CodeBrowser">
        <exec executable="phpcb">
            <arg value="--log" />
            <arg path="${builddir}/logs" />
            <arg value="--source" />
            <arg path="${sourcedir}" />
            <arg value="--output" />
            <arg path="${builddir}/code-browser" />
        </exec>
    </target>

    <target name="vendors" description="Update vendors">
        <exec executable="composer" failonerror="true">
                <arg value="update" />
        </exec>
    </target>

</project>
